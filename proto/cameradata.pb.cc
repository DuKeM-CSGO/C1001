// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cameradata.proto
// Protobuf C++ Version: 5.26.1

#include "cameradata.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace cam {

inline constexpr CMsg_CameraData_SingleCam::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : time_{0},
        px_{0},
        py_{0},
        pz_{0},
        rx_{0},
        ry_{0},
        rz_{0},
        fov_{0},
        tick_{0u},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR CMsg_CameraData_SingleCam::CMsg_CameraData_SingleCam(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct CMsg_CameraData_SingleCamDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsg_CameraData_SingleCamDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsg_CameraData_SingleCamDefaultTypeInternal() {}
  union {
    CMsg_CameraData_SingleCam _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsg_CameraData_SingleCamDefaultTypeInternal _CMsg_CameraData_SingleCam_default_instance_;

inline constexpr CMsg_CameraData::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : cams_{},
        start_time_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR CMsg_CameraData::CMsg_CameraData(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct CMsg_CameraDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsg_CameraDataDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsg_CameraDataDefaultTypeInternal() {}
  union {
    CMsg_CameraData _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsg_CameraDataDefaultTypeInternal _CMsg_CameraData_default_instance_;
}  // namespace cam
static ::_pb::Metadata file_level_metadata_cameradata_2eproto[2];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_cameradata_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_cameradata_2eproto = nullptr;
const ::uint32_t
    TableStruct_cameradata_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::cam::CMsg_CameraData_SingleCam, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::cam::CMsg_CameraData_SingleCam, _impl_.tick_),
        PROTOBUF_FIELD_OFFSET(::cam::CMsg_CameraData_SingleCam, _impl_.time_),
        PROTOBUF_FIELD_OFFSET(::cam::CMsg_CameraData_SingleCam, _impl_.px_),
        PROTOBUF_FIELD_OFFSET(::cam::CMsg_CameraData_SingleCam, _impl_.py_),
        PROTOBUF_FIELD_OFFSET(::cam::CMsg_CameraData_SingleCam, _impl_.pz_),
        PROTOBUF_FIELD_OFFSET(::cam::CMsg_CameraData_SingleCam, _impl_.rx_),
        PROTOBUF_FIELD_OFFSET(::cam::CMsg_CameraData_SingleCam, _impl_.ry_),
        PROTOBUF_FIELD_OFFSET(::cam::CMsg_CameraData_SingleCam, _impl_.rz_),
        PROTOBUF_FIELD_OFFSET(::cam::CMsg_CameraData_SingleCam, _impl_.fov_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::cam::CMsg_CameraData, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::cam::CMsg_CameraData, _impl_.cams_),
        PROTOBUF_FIELD_OFFSET(::cam::CMsg_CameraData, _impl_.start_time_),
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::cam::CMsg_CameraData_SingleCam)},
        {17, -1, -1, sizeof(::cam::CMsg_CameraData)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::cam::_CMsg_CameraData_SingleCam_default_instance_._instance,
    &::cam::_CMsg_CameraData_default_instance_._instance,
};
const char descriptor_table_protodef_cameradata_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\020cameradata.proto\022\003cam\"\321\001\n\017CMsg_CameraD"
    "ata\022,\n\004cams\030\001 \003(\0132\036.cam.CMsg_CameraData."
    "SingleCam\022\022\n\nstart_time\030\002 \001(\001\032|\n\tSingleC"
    "am\022\014\n\004tick\030\001 \001(\r\022\014\n\004time\030\002 \001(\001\022\n\n\002px\030\003 \001"
    "(\001\022\n\n\002py\030\004 \001(\001\022\n\n\002pz\030\005 \001(\001\022\n\n\002rx\030\006 \001(\001\022\n"
    "\n\002ry\030\007 \001(\001\022\n\n\002rz\030\010 \001(\001\022\013\n\003fov\030\t \001(\001b\006pro"
    "to3"
};
static ::absl::once_flag descriptor_table_cameradata_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_cameradata_2eproto = {
    false,
    false,
    243,
    descriptor_table_protodef_cameradata_2eproto,
    "cameradata.proto",
    &descriptor_table_cameradata_2eproto_once,
    nullptr,
    0,
    2,
    schemas,
    file_default_instances,
    TableStruct_cameradata_2eproto::offsets,
    file_level_metadata_cameradata_2eproto,
    file_level_enum_descriptors_cameradata_2eproto,
    file_level_service_descriptors_cameradata_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_cameradata_2eproto_getter() {
  return &descriptor_table_cameradata_2eproto;
}
namespace cam {
// ===================================================================

class CMsg_CameraData_SingleCam::_Internal {
 public:
};

CMsg_CameraData_SingleCam::CMsg_CameraData_SingleCam(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cam.CMsg_CameraData.SingleCam)
}
CMsg_CameraData_SingleCam::CMsg_CameraData_SingleCam(
    ::google::protobuf::Arena* arena, const CMsg_CameraData_SingleCam& from)
    : CMsg_CameraData_SingleCam(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE CMsg_CameraData_SingleCam::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void CMsg_CameraData_SingleCam::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, time_),
           0,
           offsetof(Impl_, tick_) -
               offsetof(Impl_, time_) +
               sizeof(Impl_::tick_));
}
CMsg_CameraData_SingleCam::~CMsg_CameraData_SingleCam() {
  // @@protoc_insertion_point(destructor:cam.CMsg_CameraData.SingleCam)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void CMsg_CameraData_SingleCam::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
CMsg_CameraData_SingleCam::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              nullptr,  // OnDemandRegisterArenaDtor
              PROTOBUF_FIELD_OFFSET(CMsg_CameraData_SingleCam, _impl_._cached_size_),
              false,
          },
          &CMsg_CameraData_SingleCam::MergeImpl,
          &CMsg_CameraData_SingleCam::kDescriptorMethods,
      };
  return &_data_;
}
PROTOBUF_NOINLINE void CMsg_CameraData_SingleCam::Clear() {
// @@protoc_insertion_point(message_clear_start:cam.CMsg_CameraData.SingleCam)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.time_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.tick_) -
      reinterpret_cast<char*>(&_impl_.time_)) + sizeof(_impl_.tick_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* CMsg_CameraData_SingleCam::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 9, 0, 0, 2> CMsg_CameraData_SingleCam::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    9, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294966784,  // skipmap
    offsetof(decltype(_table_), field_entries),
    9,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_CMsg_CameraData_SingleCam_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::cam::CMsg_CameraData_SingleCam>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // uint32 tick = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsg_CameraData_SingleCam, _impl_.tick_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(CMsg_CameraData_SingleCam, _impl_.tick_)}},
    // double time = 2;
    {::_pbi::TcParser::FastF64S1,
     {17, 63, 0, PROTOBUF_FIELD_OFFSET(CMsg_CameraData_SingleCam, _impl_.time_)}},
    // double px = 3;
    {::_pbi::TcParser::FastF64S1,
     {25, 63, 0, PROTOBUF_FIELD_OFFSET(CMsg_CameraData_SingleCam, _impl_.px_)}},
    // double py = 4;
    {::_pbi::TcParser::FastF64S1,
     {33, 63, 0, PROTOBUF_FIELD_OFFSET(CMsg_CameraData_SingleCam, _impl_.py_)}},
    // double pz = 5;
    {::_pbi::TcParser::FastF64S1,
     {41, 63, 0, PROTOBUF_FIELD_OFFSET(CMsg_CameraData_SingleCam, _impl_.pz_)}},
    // double rx = 6;
    {::_pbi::TcParser::FastF64S1,
     {49, 63, 0, PROTOBUF_FIELD_OFFSET(CMsg_CameraData_SingleCam, _impl_.rx_)}},
    // double ry = 7;
    {::_pbi::TcParser::FastF64S1,
     {57, 63, 0, PROTOBUF_FIELD_OFFSET(CMsg_CameraData_SingleCam, _impl_.ry_)}},
    // double rz = 8;
    {::_pbi::TcParser::FastF64S1,
     {65, 63, 0, PROTOBUF_FIELD_OFFSET(CMsg_CameraData_SingleCam, _impl_.rz_)}},
    // double fov = 9;
    {::_pbi::TcParser::FastF64S1,
     {73, 63, 0, PROTOBUF_FIELD_OFFSET(CMsg_CameraData_SingleCam, _impl_.fov_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // uint32 tick = 1;
    {PROTOBUF_FIELD_OFFSET(CMsg_CameraData_SingleCam, _impl_.tick_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // double time = 2;
    {PROTOBUF_FIELD_OFFSET(CMsg_CameraData_SingleCam, _impl_.time_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double px = 3;
    {PROTOBUF_FIELD_OFFSET(CMsg_CameraData_SingleCam, _impl_.px_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double py = 4;
    {PROTOBUF_FIELD_OFFSET(CMsg_CameraData_SingleCam, _impl_.py_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double pz = 5;
    {PROTOBUF_FIELD_OFFSET(CMsg_CameraData_SingleCam, _impl_.pz_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double rx = 6;
    {PROTOBUF_FIELD_OFFSET(CMsg_CameraData_SingleCam, _impl_.rx_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double ry = 7;
    {PROTOBUF_FIELD_OFFSET(CMsg_CameraData_SingleCam, _impl_.ry_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double rz = 8;
    {PROTOBUF_FIELD_OFFSET(CMsg_CameraData_SingleCam, _impl_.rz_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double fov = 9;
    {PROTOBUF_FIELD_OFFSET(CMsg_CameraData_SingleCam, _impl_.fov_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* CMsg_CameraData_SingleCam::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cam.CMsg_CameraData.SingleCam)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // uint32 tick = 1;
  if (this->_internal_tick() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_tick(), target);
  }

  // double time = 2;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_time = this->_internal_time();
  ::uint64_t raw_time;
  memcpy(&raw_time, &tmp_time, sizeof(tmp_time));
  if (raw_time != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        2, this->_internal_time(), target);
  }

  // double px = 3;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_px = this->_internal_px();
  ::uint64_t raw_px;
  memcpy(&raw_px, &tmp_px, sizeof(tmp_px));
  if (raw_px != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        3, this->_internal_px(), target);
  }

  // double py = 4;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_py = this->_internal_py();
  ::uint64_t raw_py;
  memcpy(&raw_py, &tmp_py, sizeof(tmp_py));
  if (raw_py != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        4, this->_internal_py(), target);
  }

  // double pz = 5;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_pz = this->_internal_pz();
  ::uint64_t raw_pz;
  memcpy(&raw_pz, &tmp_pz, sizeof(tmp_pz));
  if (raw_pz != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        5, this->_internal_pz(), target);
  }

  // double rx = 6;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_rx = this->_internal_rx();
  ::uint64_t raw_rx;
  memcpy(&raw_rx, &tmp_rx, sizeof(tmp_rx));
  if (raw_rx != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        6, this->_internal_rx(), target);
  }

  // double ry = 7;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_ry = this->_internal_ry();
  ::uint64_t raw_ry;
  memcpy(&raw_ry, &tmp_ry, sizeof(tmp_ry));
  if (raw_ry != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        7, this->_internal_ry(), target);
  }

  // double rz = 8;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_rz = this->_internal_rz();
  ::uint64_t raw_rz;
  memcpy(&raw_rz, &tmp_rz, sizeof(tmp_rz));
  if (raw_rz != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        8, this->_internal_rz(), target);
  }

  // double fov = 9;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_fov = this->_internal_fov();
  ::uint64_t raw_fov;
  memcpy(&raw_fov, &tmp_fov, sizeof(tmp_fov));
  if (raw_fov != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        9, this->_internal_fov(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cam.CMsg_CameraData.SingleCam)
  return target;
}

::size_t CMsg_CameraData_SingleCam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cam.CMsg_CameraData.SingleCam)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double time = 2;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_time = this->_internal_time();
  ::uint64_t raw_time;
  memcpy(&raw_time, &tmp_time, sizeof(tmp_time));
  if (raw_time != 0) {
    total_size += 9;
  }

  // double px = 3;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_px = this->_internal_px();
  ::uint64_t raw_px;
  memcpy(&raw_px, &tmp_px, sizeof(tmp_px));
  if (raw_px != 0) {
    total_size += 9;
  }

  // double py = 4;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_py = this->_internal_py();
  ::uint64_t raw_py;
  memcpy(&raw_py, &tmp_py, sizeof(tmp_py));
  if (raw_py != 0) {
    total_size += 9;
  }

  // double pz = 5;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_pz = this->_internal_pz();
  ::uint64_t raw_pz;
  memcpy(&raw_pz, &tmp_pz, sizeof(tmp_pz));
  if (raw_pz != 0) {
    total_size += 9;
  }

  // double rx = 6;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_rx = this->_internal_rx();
  ::uint64_t raw_rx;
  memcpy(&raw_rx, &tmp_rx, sizeof(tmp_rx));
  if (raw_rx != 0) {
    total_size += 9;
  }

  // double ry = 7;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_ry = this->_internal_ry();
  ::uint64_t raw_ry;
  memcpy(&raw_ry, &tmp_ry, sizeof(tmp_ry));
  if (raw_ry != 0) {
    total_size += 9;
  }

  // double rz = 8;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_rz = this->_internal_rz();
  ::uint64_t raw_rz;
  memcpy(&raw_rz, &tmp_rz, sizeof(tmp_rz));
  if (raw_rz != 0) {
    total_size += 9;
  }

  // double fov = 9;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_fov = this->_internal_fov();
  ::uint64_t raw_fov;
  memcpy(&raw_fov, &tmp_fov, sizeof(tmp_fov));
  if (raw_fov != 0) {
    total_size += 9;
  }

  // uint32 tick = 1;
  if (this->_internal_tick() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_tick());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void CMsg_CameraData_SingleCam::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<CMsg_CameraData_SingleCam*>(&to_msg);
  auto& from = static_cast<const CMsg_CameraData_SingleCam&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cam.CMsg_CameraData.SingleCam)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_time = from._internal_time();
  ::uint64_t raw_time;
  memcpy(&raw_time, &tmp_time, sizeof(tmp_time));
  if (raw_time != 0) {
    _this->_impl_.time_ = from._impl_.time_;
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_px = from._internal_px();
  ::uint64_t raw_px;
  memcpy(&raw_px, &tmp_px, sizeof(tmp_px));
  if (raw_px != 0) {
    _this->_impl_.px_ = from._impl_.px_;
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_py = from._internal_py();
  ::uint64_t raw_py;
  memcpy(&raw_py, &tmp_py, sizeof(tmp_py));
  if (raw_py != 0) {
    _this->_impl_.py_ = from._impl_.py_;
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_pz = from._internal_pz();
  ::uint64_t raw_pz;
  memcpy(&raw_pz, &tmp_pz, sizeof(tmp_pz));
  if (raw_pz != 0) {
    _this->_impl_.pz_ = from._impl_.pz_;
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_rx = from._internal_rx();
  ::uint64_t raw_rx;
  memcpy(&raw_rx, &tmp_rx, sizeof(tmp_rx));
  if (raw_rx != 0) {
    _this->_impl_.rx_ = from._impl_.rx_;
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_ry = from._internal_ry();
  ::uint64_t raw_ry;
  memcpy(&raw_ry, &tmp_ry, sizeof(tmp_ry));
  if (raw_ry != 0) {
    _this->_impl_.ry_ = from._impl_.ry_;
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_rz = from._internal_rz();
  ::uint64_t raw_rz;
  memcpy(&raw_rz, &tmp_rz, sizeof(tmp_rz));
  if (raw_rz != 0) {
    _this->_impl_.rz_ = from._impl_.rz_;
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_fov = from._internal_fov();
  ::uint64_t raw_fov;
  memcpy(&raw_fov, &tmp_fov, sizeof(tmp_fov));
  if (raw_fov != 0) {
    _this->_impl_.fov_ = from._impl_.fov_;
  }
  if (from._internal_tick() != 0) {
    _this->_impl_.tick_ = from._impl_.tick_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CMsg_CameraData_SingleCam::CopyFrom(const CMsg_CameraData_SingleCam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cam.CMsg_CameraData.SingleCam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool CMsg_CameraData_SingleCam::IsInitialized() const {
  return true;
}

void CMsg_CameraData_SingleCam::InternalSwap(CMsg_CameraData_SingleCam* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsg_CameraData_SingleCam, _impl_.tick_)
      + sizeof(CMsg_CameraData_SingleCam::_impl_.tick_)
      - PROTOBUF_FIELD_OFFSET(CMsg_CameraData_SingleCam, _impl_.time_)>(
          reinterpret_cast<char*>(&_impl_.time_),
          reinterpret_cast<char*>(&other->_impl_.time_));
}

::google::protobuf::Metadata CMsg_CameraData_SingleCam::GetMetadata() const {
  return ::_pbi::AssignDescriptors(&descriptor_table_cameradata_2eproto_getter,
                                   &descriptor_table_cameradata_2eproto_once,
                                   file_level_metadata_cameradata_2eproto[0]);
}
// ===================================================================

class CMsg_CameraData::_Internal {
 public:
};

CMsg_CameraData::CMsg_CameraData(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cam.CMsg_CameraData)
}
inline PROTOBUF_NDEBUG_INLINE CMsg_CameraData::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : cams_{visibility, arena, from.cams_},
        _cached_size_{0} {}

CMsg_CameraData::CMsg_CameraData(
    ::google::protobuf::Arena* arena,
    const CMsg_CameraData& from)
    : ::google::protobuf::Message(arena) {
  CMsg_CameraData* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  _impl_.start_time_ = from._impl_.start_time_;

  // @@protoc_insertion_point(copy_constructor:cam.CMsg_CameraData)
}
inline PROTOBUF_NDEBUG_INLINE CMsg_CameraData::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : cams_{visibility, arena},
        _cached_size_{0} {}

inline void CMsg_CameraData::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.start_time_ = {};
}
CMsg_CameraData::~CMsg_CameraData() {
  // @@protoc_insertion_point(destructor:cam.CMsg_CameraData)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void CMsg_CameraData::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
CMsg_CameraData::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              nullptr,  // OnDemandRegisterArenaDtor
              PROTOBUF_FIELD_OFFSET(CMsg_CameraData, _impl_._cached_size_),
              false,
          },
          &CMsg_CameraData::MergeImpl,
          &CMsg_CameraData::kDescriptorMethods,
      };
  return &_data_;
}
PROTOBUF_NOINLINE void CMsg_CameraData::Clear() {
// @@protoc_insertion_point(message_clear_start:cam.CMsg_CameraData)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.cams_.Clear();
  _impl_.start_time_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* CMsg_CameraData::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 0, 2> CMsg_CameraData::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_CMsg_CameraData_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::cam::CMsg_CameraData>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // double start_time = 2;
    {::_pbi::TcParser::FastF64S1,
     {17, 63, 0, PROTOBUF_FIELD_OFFSET(CMsg_CameraData, _impl_.start_time_)}},
    // repeated .cam.CMsg_CameraData.SingleCam cams = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(CMsg_CameraData, _impl_.cams_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .cam.CMsg_CameraData.SingleCam cams = 1;
    {PROTOBUF_FIELD_OFFSET(CMsg_CameraData, _impl_.cams_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // double start_time = 2;
    {PROTOBUF_FIELD_OFFSET(CMsg_CameraData, _impl_.start_time_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
  }}, {{
    {::_pbi::TcParser::GetTable<::cam::CMsg_CameraData_SingleCam>()},
  }}, {{
  }},
};

::uint8_t* CMsg_CameraData::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cam.CMsg_CameraData)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .cam.CMsg_CameraData.SingleCam cams = 1;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this->_internal_cams_size());
       i < n; i++) {
    const auto& repfield = this->_internal_cams().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            1, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  // double start_time = 2;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_start_time = this->_internal_start_time();
  ::uint64_t raw_start_time;
  memcpy(&raw_start_time, &tmp_start_time, sizeof(tmp_start_time));
  if (raw_start_time != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        2, this->_internal_start_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cam.CMsg_CameraData)
  return target;
}

::size_t CMsg_CameraData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cam.CMsg_CameraData)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cam.CMsg_CameraData.SingleCam cams = 1;
  total_size += 1UL * this->_internal_cams_size();
  for (const auto& msg : this->_internal_cams()) {
    total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // double start_time = 2;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_start_time = this->_internal_start_time();
  ::uint64_t raw_start_time;
  memcpy(&raw_start_time, &tmp_start_time, sizeof(tmp_start_time));
  if (raw_start_time != 0) {
    total_size += 9;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void CMsg_CameraData::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<CMsg_CameraData*>(&to_msg);
  auto& from = static_cast<const CMsg_CameraData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cam.CMsg_CameraData)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_cams()->MergeFrom(
      from._internal_cams());
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_start_time = from._internal_start_time();
  ::uint64_t raw_start_time;
  memcpy(&raw_start_time, &tmp_start_time, sizeof(tmp_start_time));
  if (raw_start_time != 0) {
    _this->_impl_.start_time_ = from._impl_.start_time_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CMsg_CameraData::CopyFrom(const CMsg_CameraData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cam.CMsg_CameraData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool CMsg_CameraData::IsInitialized() const {
  return true;
}

void CMsg_CameraData::InternalSwap(CMsg_CameraData* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.cams_.InternalSwap(&other->_impl_.cams_);
        swap(_impl_.start_time_, other->_impl_.start_time_);
}

::google::protobuf::Metadata CMsg_CameraData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(&descriptor_table_cameradata_2eproto_getter,
                                   &descriptor_table_cameradata_2eproto_once,
                                   file_level_metadata_cameradata_2eproto[1]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace cam
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::std::false_type _static_init_ PROTOBUF_UNUSED =
    (::_pbi::AddDescriptors(&descriptor_table_cameradata_2eproto),
     ::std::false_type{});
#include "google/protobuf/port_undef.inc"
