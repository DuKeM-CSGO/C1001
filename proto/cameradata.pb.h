// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cameradata.proto
// Protobuf C++ Version: 5.26.1

#ifndef GOOGLE_PROTOBUF_INCLUDED_cameradata_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_cameradata_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION != 5026001
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_cameradata_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_cameradata_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_cameradata_2eproto;
namespace cam {
class CMsg_CameraData;
struct CMsg_CameraDataDefaultTypeInternal;
extern CMsg_CameraDataDefaultTypeInternal _CMsg_CameraData_default_instance_;
class CMsg_CameraData_SingleCam;
struct CMsg_CameraData_SingleCamDefaultTypeInternal;
extern CMsg_CameraData_SingleCamDefaultTypeInternal _CMsg_CameraData_SingleCam_default_instance_;
}  // namespace cam
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace cam {

// ===================================================================


// -------------------------------------------------------------------

class CMsg_CameraData_SingleCam final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cam.CMsg_CameraData.SingleCam) */ {
 public:
  inline CMsg_CameraData_SingleCam() : CMsg_CameraData_SingleCam(nullptr) {}
  ~CMsg_CameraData_SingleCam() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR CMsg_CameraData_SingleCam(
      ::google::protobuf::internal::ConstantInitialized);

  inline CMsg_CameraData_SingleCam(const CMsg_CameraData_SingleCam& from) : CMsg_CameraData_SingleCam(nullptr, from) {}
  inline CMsg_CameraData_SingleCam(CMsg_CameraData_SingleCam&& from) noexcept
      : CMsg_CameraData_SingleCam(nullptr, std::move(from)) {}
  inline CMsg_CameraData_SingleCam& operator=(const CMsg_CameraData_SingleCam& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsg_CameraData_SingleCam& operator=(CMsg_CameraData_SingleCam&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsg_CameraData_SingleCam& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsg_CameraData_SingleCam* internal_default_instance() {
    return reinterpret_cast<const CMsg_CameraData_SingleCam*>(
        &_CMsg_CameraData_SingleCam_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(CMsg_CameraData_SingleCam& a, CMsg_CameraData_SingleCam& b) { a.Swap(&b); }
  inline void Swap(CMsg_CameraData_SingleCam* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsg_CameraData_SingleCam* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsg_CameraData_SingleCam* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<CMsg_CameraData_SingleCam>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CMsg_CameraData_SingleCam& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const CMsg_CameraData_SingleCam& from) { CMsg_CameraData_SingleCam::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(CMsg_CameraData_SingleCam* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "cam.CMsg_CameraData.SingleCam"; }

 protected:
  explicit CMsg_CameraData_SingleCam(::google::protobuf::Arena* arena);
  CMsg_CameraData_SingleCam(::google::protobuf::Arena* arena, const CMsg_CameraData_SingleCam& from);
  CMsg_CameraData_SingleCam(::google::protobuf::Arena* arena, CMsg_CameraData_SingleCam&& from) noexcept
      : CMsg_CameraData_SingleCam(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTimeFieldNumber = 2,
    kPxFieldNumber = 3,
    kPyFieldNumber = 4,
    kPzFieldNumber = 5,
    kRxFieldNumber = 6,
    kRyFieldNumber = 7,
    kRzFieldNumber = 8,
    kFovFieldNumber = 9,
    kTickFieldNumber = 1,
  };
  // double time = 2;
  void clear_time() ;
  double time() const;
  void set_time(double value);

  private:
  double _internal_time() const;
  void _internal_set_time(double value);

  public:
  // double px = 3;
  void clear_px() ;
  double px() const;
  void set_px(double value);

  private:
  double _internal_px() const;
  void _internal_set_px(double value);

  public:
  // double py = 4;
  void clear_py() ;
  double py() const;
  void set_py(double value);

  private:
  double _internal_py() const;
  void _internal_set_py(double value);

  public:
  // double pz = 5;
  void clear_pz() ;
  double pz() const;
  void set_pz(double value);

  private:
  double _internal_pz() const;
  void _internal_set_pz(double value);

  public:
  // double rx = 6;
  void clear_rx() ;
  double rx() const;
  void set_rx(double value);

  private:
  double _internal_rx() const;
  void _internal_set_rx(double value);

  public:
  // double ry = 7;
  void clear_ry() ;
  double ry() const;
  void set_ry(double value);

  private:
  double _internal_ry() const;
  void _internal_set_ry(double value);

  public:
  // double rz = 8;
  void clear_rz() ;
  double rz() const;
  void set_rz(double value);

  private:
  double _internal_rz() const;
  void _internal_set_rz(double value);

  public:
  // double fov = 9;
  void clear_fov() ;
  double fov() const;
  void set_fov(double value);

  private:
  double _internal_fov() const;
  void _internal_set_fov(double value);

  public:
  // uint32 tick = 1;
  void clear_tick() ;
  ::uint32_t tick() const;
  void set_tick(::uint32_t value);

  private:
  ::uint32_t _internal_tick() const;
  void _internal_set_tick(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:cam.CMsg_CameraData.SingleCam)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 9, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    double time_;
    double px_;
    double py_;
    double pz_;
    double rx_;
    double ry_;
    double rz_;
    double fov_;
    ::uint32_t tick_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cameradata_2eproto;
};
// -------------------------------------------------------------------

class CMsg_CameraData final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cam.CMsg_CameraData) */ {
 public:
  inline CMsg_CameraData() : CMsg_CameraData(nullptr) {}
  ~CMsg_CameraData() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR CMsg_CameraData(
      ::google::protobuf::internal::ConstantInitialized);

  inline CMsg_CameraData(const CMsg_CameraData& from) : CMsg_CameraData(nullptr, from) {}
  inline CMsg_CameraData(CMsg_CameraData&& from) noexcept
      : CMsg_CameraData(nullptr, std::move(from)) {}
  inline CMsg_CameraData& operator=(const CMsg_CameraData& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsg_CameraData& operator=(CMsg_CameraData&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsg_CameraData& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsg_CameraData* internal_default_instance() {
    return reinterpret_cast<const CMsg_CameraData*>(
        &_CMsg_CameraData_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(CMsg_CameraData& a, CMsg_CameraData& b) { a.Swap(&b); }
  inline void Swap(CMsg_CameraData* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsg_CameraData* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsg_CameraData* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<CMsg_CameraData>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CMsg_CameraData& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const CMsg_CameraData& from) { CMsg_CameraData::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(CMsg_CameraData* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "cam.CMsg_CameraData"; }

 protected:
  explicit CMsg_CameraData(::google::protobuf::Arena* arena);
  CMsg_CameraData(::google::protobuf::Arena* arena, const CMsg_CameraData& from);
  CMsg_CameraData(::google::protobuf::Arena* arena, CMsg_CameraData&& from) noexcept
      : CMsg_CameraData(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------
  using SingleCam = CMsg_CameraData_SingleCam;

  // accessors -------------------------------------------------------
  enum : int {
    kCamsFieldNumber = 1,
    kStartTimeFieldNumber = 2,
  };
  // repeated .cam.CMsg_CameraData.SingleCam cams = 1;
  int cams_size() const;
  private:
  int _internal_cams_size() const;

  public:
  void clear_cams() ;
  ::cam::CMsg_CameraData_SingleCam* mutable_cams(int index);
  ::google::protobuf::RepeatedPtrField<::cam::CMsg_CameraData_SingleCam>* mutable_cams();

  private:
  const ::google::protobuf::RepeatedPtrField<::cam::CMsg_CameraData_SingleCam>& _internal_cams() const;
  ::google::protobuf::RepeatedPtrField<::cam::CMsg_CameraData_SingleCam>* _internal_mutable_cams();
  public:
  const ::cam::CMsg_CameraData_SingleCam& cams(int index) const;
  ::cam::CMsg_CameraData_SingleCam* add_cams();
  const ::google::protobuf::RepeatedPtrField<::cam::CMsg_CameraData_SingleCam>& cams() const;
  // double start_time = 2;
  void clear_start_time() ;
  double start_time() const;
  void set_start_time(double value);

  private:
  double _internal_start_time() const;
  void _internal_set_start_time(double value);

  public:
  // @@protoc_insertion_point(class_scope:cam.CMsg_CameraData)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField< ::cam::CMsg_CameraData_SingleCam > cams_;
    double start_time_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cameradata_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// CMsg_CameraData_SingleCam

// uint32 tick = 1;
inline void CMsg_CameraData_SingleCam::clear_tick() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.tick_ = 0u;
}
inline ::uint32_t CMsg_CameraData_SingleCam::tick() const {
  // @@protoc_insertion_point(field_get:cam.CMsg_CameraData.SingleCam.tick)
  return _internal_tick();
}
inline void CMsg_CameraData_SingleCam::set_tick(::uint32_t value) {
  _internal_set_tick(value);
  // @@protoc_insertion_point(field_set:cam.CMsg_CameraData.SingleCam.tick)
}
inline ::uint32_t CMsg_CameraData_SingleCam::_internal_tick() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.tick_;
}
inline void CMsg_CameraData_SingleCam::_internal_set_tick(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.tick_ = value;
}

// double time = 2;
inline void CMsg_CameraData_SingleCam::clear_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.time_ = 0;
}
inline double CMsg_CameraData_SingleCam::time() const {
  // @@protoc_insertion_point(field_get:cam.CMsg_CameraData.SingleCam.time)
  return _internal_time();
}
inline void CMsg_CameraData_SingleCam::set_time(double value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:cam.CMsg_CameraData.SingleCam.time)
}
inline double CMsg_CameraData_SingleCam::_internal_time() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.time_;
}
inline void CMsg_CameraData_SingleCam::_internal_set_time(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.time_ = value;
}

// double px = 3;
inline void CMsg_CameraData_SingleCam::clear_px() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.px_ = 0;
}
inline double CMsg_CameraData_SingleCam::px() const {
  // @@protoc_insertion_point(field_get:cam.CMsg_CameraData.SingleCam.px)
  return _internal_px();
}
inline void CMsg_CameraData_SingleCam::set_px(double value) {
  _internal_set_px(value);
  // @@protoc_insertion_point(field_set:cam.CMsg_CameraData.SingleCam.px)
}
inline double CMsg_CameraData_SingleCam::_internal_px() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.px_;
}
inline void CMsg_CameraData_SingleCam::_internal_set_px(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.px_ = value;
}

// double py = 4;
inline void CMsg_CameraData_SingleCam::clear_py() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.py_ = 0;
}
inline double CMsg_CameraData_SingleCam::py() const {
  // @@protoc_insertion_point(field_get:cam.CMsg_CameraData.SingleCam.py)
  return _internal_py();
}
inline void CMsg_CameraData_SingleCam::set_py(double value) {
  _internal_set_py(value);
  // @@protoc_insertion_point(field_set:cam.CMsg_CameraData.SingleCam.py)
}
inline double CMsg_CameraData_SingleCam::_internal_py() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.py_;
}
inline void CMsg_CameraData_SingleCam::_internal_set_py(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.py_ = value;
}

// double pz = 5;
inline void CMsg_CameraData_SingleCam::clear_pz() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.pz_ = 0;
}
inline double CMsg_CameraData_SingleCam::pz() const {
  // @@protoc_insertion_point(field_get:cam.CMsg_CameraData.SingleCam.pz)
  return _internal_pz();
}
inline void CMsg_CameraData_SingleCam::set_pz(double value) {
  _internal_set_pz(value);
  // @@protoc_insertion_point(field_set:cam.CMsg_CameraData.SingleCam.pz)
}
inline double CMsg_CameraData_SingleCam::_internal_pz() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.pz_;
}
inline void CMsg_CameraData_SingleCam::_internal_set_pz(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.pz_ = value;
}

// double rx = 6;
inline void CMsg_CameraData_SingleCam::clear_rx() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.rx_ = 0;
}
inline double CMsg_CameraData_SingleCam::rx() const {
  // @@protoc_insertion_point(field_get:cam.CMsg_CameraData.SingleCam.rx)
  return _internal_rx();
}
inline void CMsg_CameraData_SingleCam::set_rx(double value) {
  _internal_set_rx(value);
  // @@protoc_insertion_point(field_set:cam.CMsg_CameraData.SingleCam.rx)
}
inline double CMsg_CameraData_SingleCam::_internal_rx() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.rx_;
}
inline void CMsg_CameraData_SingleCam::_internal_set_rx(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.rx_ = value;
}

// double ry = 7;
inline void CMsg_CameraData_SingleCam::clear_ry() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.ry_ = 0;
}
inline double CMsg_CameraData_SingleCam::ry() const {
  // @@protoc_insertion_point(field_get:cam.CMsg_CameraData.SingleCam.ry)
  return _internal_ry();
}
inline void CMsg_CameraData_SingleCam::set_ry(double value) {
  _internal_set_ry(value);
  // @@protoc_insertion_point(field_set:cam.CMsg_CameraData.SingleCam.ry)
}
inline double CMsg_CameraData_SingleCam::_internal_ry() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.ry_;
}
inline void CMsg_CameraData_SingleCam::_internal_set_ry(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.ry_ = value;
}

// double rz = 8;
inline void CMsg_CameraData_SingleCam::clear_rz() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.rz_ = 0;
}
inline double CMsg_CameraData_SingleCam::rz() const {
  // @@protoc_insertion_point(field_get:cam.CMsg_CameraData.SingleCam.rz)
  return _internal_rz();
}
inline void CMsg_CameraData_SingleCam::set_rz(double value) {
  _internal_set_rz(value);
  // @@protoc_insertion_point(field_set:cam.CMsg_CameraData.SingleCam.rz)
}
inline double CMsg_CameraData_SingleCam::_internal_rz() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.rz_;
}
inline void CMsg_CameraData_SingleCam::_internal_set_rz(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.rz_ = value;
}

// double fov = 9;
inline void CMsg_CameraData_SingleCam::clear_fov() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.fov_ = 0;
}
inline double CMsg_CameraData_SingleCam::fov() const {
  // @@protoc_insertion_point(field_get:cam.CMsg_CameraData.SingleCam.fov)
  return _internal_fov();
}
inline void CMsg_CameraData_SingleCam::set_fov(double value) {
  _internal_set_fov(value);
  // @@protoc_insertion_point(field_set:cam.CMsg_CameraData.SingleCam.fov)
}
inline double CMsg_CameraData_SingleCam::_internal_fov() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.fov_;
}
inline void CMsg_CameraData_SingleCam::_internal_set_fov(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.fov_ = value;
}

// -------------------------------------------------------------------

// CMsg_CameraData

// repeated .cam.CMsg_CameraData.SingleCam cams = 1;
inline int CMsg_CameraData::_internal_cams_size() const {
  return _internal_cams().size();
}
inline int CMsg_CameraData::cams_size() const {
  return _internal_cams_size();
}
inline void CMsg_CameraData::clear_cams() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.cams_.Clear();
}
inline ::cam::CMsg_CameraData_SingleCam* CMsg_CameraData::mutable_cams(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:cam.CMsg_CameraData.cams)
  return _internal_mutable_cams()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::cam::CMsg_CameraData_SingleCam>* CMsg_CameraData::mutable_cams()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:cam.CMsg_CameraData.cams)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_cams();
}
inline const ::cam::CMsg_CameraData_SingleCam& CMsg_CameraData::cams(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cam.CMsg_CameraData.cams)
  return _internal_cams().Get(index);
}
inline ::cam::CMsg_CameraData_SingleCam* CMsg_CameraData::add_cams() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::cam::CMsg_CameraData_SingleCam* _add = _internal_mutable_cams()->Add();
  // @@protoc_insertion_point(field_add:cam.CMsg_CameraData.cams)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::cam::CMsg_CameraData_SingleCam>& CMsg_CameraData::cams() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:cam.CMsg_CameraData.cams)
  return _internal_cams();
}
inline const ::google::protobuf::RepeatedPtrField<::cam::CMsg_CameraData_SingleCam>&
CMsg_CameraData::_internal_cams() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.cams_;
}
inline ::google::protobuf::RepeatedPtrField<::cam::CMsg_CameraData_SingleCam>*
CMsg_CameraData::_internal_mutable_cams() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.cams_;
}

// double start_time = 2;
inline void CMsg_CameraData::clear_start_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.start_time_ = 0;
}
inline double CMsg_CameraData::start_time() const {
  // @@protoc_insertion_point(field_get:cam.CMsg_CameraData.start_time)
  return _internal_start_time();
}
inline void CMsg_CameraData::set_start_time(double value) {
  _internal_set_start_time(value);
  // @@protoc_insertion_point(field_set:cam.CMsg_CameraData.start_time)
}
inline double CMsg_CameraData::_internal_start_time() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.start_time_;
}
inline void CMsg_CameraData::_internal_set_start_time(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.start_time_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace cam


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_cameradata_2eproto_2epb_2eh
